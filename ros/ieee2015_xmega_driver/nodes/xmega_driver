#!/usr/bin/python
from __future__ import division # Make all division floating point division

# Misc
import os
import argparse
import time
import threading

# Ros
import rospy
import tf.transformations as tf_trans
import numpy as np

# Ros packages
import roslib; roslib.load_manifest('ieee2015_xmega_driver')
import xmega_driver

# Ros Msgs
from std_msgs.msg import Header, Float64, String, Int16
from geometry_msgs.msg import Point, PointStamped, PoseStamped, Pose, Quaternion, Vector3, TwistStamped
from sensor_msgs.msg import Imu
from ieee2015_xmega_driver.msg import XMega_Message


class Xmega_Driver(object):
    def __init__(self, types_path, comm_port='/dev/xmega_tty'):
        '''Xmega driver -- handles the serial interface with the Xmega128A1U for the IEEE 2015 robot.
        XMega Sensor Manifest:
            - IMU (9DOF) - 12 bytes (only using 6 DOF) [An IMU is an intertial measurement unit]
            - Light Sensor
            - 4x: Encoders/Odometry
            - 1-2x: Solenoid State (XMega will hold this internally)
            - 1-2x: On/Kill Switches
            - 1-2x: Battery Monitors

        XMega Actuator Manifest:
            - 4x: Wheel Motors (Set Motor Velocities)
            - Unk: Non-Wheel control motors (Set torque)
            - 4-5x: Servos (Arm and a few places, set angle)
            - 4x: Status LED's (Toggle)
            - 1-2x: Solenoids (Go, no-go!)

        TODO:
            - Add better threading locks (ones that don't cause message loss)
            - Make the RECEIVING ros messages part make more sense
            -- I think this will mean instantiating specific subscribers in here and then using
               a more advanced thread-lock and queuing interface to deal with those threaded ros callbacks
            --- Forrest's TXROS is not out of the question
            - Do something crazy with hotplug rules to make the serial proxy always run

            - Raise an exception if somebody tries to send a message with inappropriate length
            - We NEED to add a delimiter to make sure messages do what they are supposed to

        ROS Package Deployment:
            In the distant future, it may be worth turning this into a pure ROS interface
            - Set up a YAML file that configures a whole bunch of ROS topics that directly subscribe to the xmega
            - Set up a YAML file that configures the message type to hex code magic.
        '''

        self.comm_port = comm_port

        # ROS Setup
        rospy.init_node('XMega_Connector')
        self.serial_proxy = xmega_driver.Serial_Proxy(
            port=self.comm_port,
            # port='/dev/ttyUSB0',
            baud_rate=256000, 
            verbose=2,
        )

        # Add ROS elements
        self.accel_data_pub = rospy.Publisher('imu', Imu, queue_size=1)
        # Messages being sent from ROS to the XMega
        # To add a ROS->XMega message, you must...
        # Potentially add binding for ros-sending functions as well.
        self.debug_subscriber = rospy.Subscriber('debug', String, self.got_ros_debug)
        self.vel_sub = rospy.Subscriber('desired_velocity', TwistStamped, self.got_desired_vel)
        self.test_vel_sub = rospy.Subscriber('test_vel', Int16, self.send_test_motor_vel)

        # Bind types.h info for the serial proxy
        self.serial_proxy.bind_types(types_path)

        # Bind callbacks for messages FROM the Xmega
        self.serial_proxy.bind_callback('vector_error', self.got_xmega_v_error)
        self.serial_proxy.bind_callback('message_error', self.got_xmega_error)
        self.serial_proxy.bind_callback('buffer_error', self.got_xmega_error)
        self.serial_proxy.bind_callback('imu_data', self.got_imu_reading)
        self.serial_proxy.bind_callback('keep_alive', self.got_keep_alive)

        # Start message
        self.send_start_msg()
        self.start_polling_loops()

        # Relinquish control of the program - this is an infinite loop
        self.serial_proxy.run_serial_loop()

########## NOTHING WILL BE EXECUTED AFTER THIS LINE EXCEPT PREVIOUSLY BOUND CALLBACK FUNCTIONS ###############

    def send_start_msg(self):
        '''Send the start message that tells the XMega the robot is ready to begin working'''
        self.serial_proxy.add_message('start')

    def start_polling_loops(self):
        def imu_loop():
            old_time = time.time()
            while(1):
                cur_time = time.time()
                if (cur_time - old_time) > 0.2:
                    old_time = cur_time
                    # self.serial_proxy.add_message('poll_imu')

        imu_poll = threading.Thread(target=imu_loop)
        imu_poll.daemon = True
        imu_poll.start()

    def send_test_motor_vel(self, msg):
        byte_vel = np.array([msg.data, msg.data, msg.data, msg.data], np.int16).tostring()
        print 'sending motor vel'
        self.serial_proxy.add_message('motor_speed', byte_vel)

    def got_ros_debug(self, msg):
        '''This is an example of how you might send a message to the XMega'''
        string = msg.data
        for char in string:
            self.serial_proxy.add_message('ros_debug', char)

    def got_keep_alive(self, msg):
        # print 'Got a keep alive'
        pass

    def got_desired_vel(self, msg):
        INCH = 25.4e-3
        width =  9.345*INCH
        length = 8.119*INCH

        wheels = [
            ((-length/2, -width/2, 0), (+1, -1, 0)), # rear right
            ((-length/2, +width/2, 0), (+1, +1, 0)), # rear left
            ((+length/2, -width/2, 0), (+1, +1, 0)), # front right
            ((+length/2, +width/2, 0), (+1, -1, 0)), # front left
        ]

        wheel_diameter = 54e-3 # 54 mm
        wheel_radius = wheel_diameter / 2

        xyz_array = lambda o: numpy.array([o.x, o.y, o.z])

        def trajectory_to_wheel_speeds(msg):

            def get_vel_at_point(body_point):
                return xyz_array(msg.twist.linear) + numpy.cross(xyz_array(msg.twist.angular), body_point)

            ws_req = SetWheelSpeedsRequest()
            [ws_req.wheel1, ws_req.wheel2, ws_req.wheel3, ws_req.wheel4] = [
                get_vel_at_point(wheel_pos).dot(transformations.unit_vector(wheel_dir)) / wheel_radius * math.sqrt(2)
                for wheel_pos, wheel_dir in wheels]


    def got_xmega_error(self, msg_data):
        print "\nGot error,", msg_data

    def got_xmega_v_error(self, msg_data):
        print "\nGot vector error,", msg_data

    def got_test(self, msg_data):
        print "Recieved test!"
        if msg_data is not None:
            print "Data:", msg_data

    def got_imu_reading(self, msg_data):
        '''Handle data read from the IMU
        The IMU we have is 9-DOF, meaning that it reads:
            Linear acceleration in XYZ
            Rotational velocity in XYZ
            Gyroscope Readings in X and Y axis
            Magnetometer/Compass readings around Z axis

        We also found some spare IMUs that additionally read barometric altitude

        IMU Message:
            std_msgs/Header header
            geometry_msgs/Quaternion orientation
            float64[9] orientation_covariance
            geometry_msgs/Vector3 angular_velocity
            float64[9] angular_velocity_covariance
            geometry_msgs/Vector3 linear_acceleration
            float64[9] linear_acceleration_covariance
        '''
        # Where vel -> velocity, and acc -> acceleration

        def combine_bytes(high_byte, low_byte):
            '''combine two bytes
            TODO:
                Make this tolerate an arbitrary sequence of bytes
            '''
            # Combine the two bytes into a 16 bit int
            number = (high_byte << 8) | low_byte  
            if number & 0b1000000000000000:
                # If the sign bit is 1, compute the two's complement decimal value
                return -((~number & 0xFFFF) + 1)  
            else:
                # If the sign bit is not negative, the answer is the number exactly
                return number

        order = [
            'ACCX_L', 'ACCX_H', 
            'ACCY_L', 'ACCY_H', 
            'ACCZ_L', 'ACCZ_H', 
            'MX_L', 'MX_H', 
            'MY_L', 'MY_H',
            'MZ_L', 'MZ_H',
        ]

        msg_contents = {}
        for character, meaning in zip(msg_data, order):
            msg_contents[meaning] = ord(character)

        decomposition = {
            'lin_acc_x': combine_bytes(msg_contents['ACCX_H'], msg_contents['ACCX_L']),
            'lin_acc_y': combine_bytes(msg_contents['ACCY_H'], msg_contents['ACCY_L']),
            'lin_acc_z': combine_bytes(msg_contents['ACCZ_H'], msg_contents['ACCZ_L']),
            'ang_vel_x': 0.0,
            'ang_vel_y': 0.0,
            'ang_vel_z': 0.0,
            'magnetic_x': combine_bytes(msg_contents['MX_H'], msg_contents['MX_L']),
            'magnetic_y': combine_bytes(msg_contents['MY_H'], msg_contents['MY_L']),
            'magnetic_z': combine_bytes(msg_contents['MZ_H'], msg_contents['MZ_L']),
            'barometric_altitude': 0.0,
        }

        # print '--------------------'
        # for name, value in decomposition.items():
            # print name, ':', value

        mag_orientation = (
            decomposition['magnetic_x'],
            decomposition['magnetic_y'],
            decomposition['magnetic_z'],
        )

        angular_vel = (
            decomposition['ang_vel_x'],
            decomposition['ang_vel_y'],
            decomposition['ang_vel_z'],
        )
        linear_acc = (
            decomposition['lin_acc_x'],
            decomposition['lin_acc_y'],
            decomposition['lin_acc_z'],
        )

        orientation = tf_trans.quaternion_from_euler(*mag_orientation)
        IMU_msg = Imu(
            header=Header(
                stamp=rospy.Time.now(),
                frame_id='/robot',
            ),
            orientation=Quaternion(*orientation), 
            orientation_covariance=
                [0.03**2, 0,       0,
                 0,       0.03**2, 0,
                 0,       0,       0.03**2,],
            # angular_velocity=Vector3(*angular_vel), # This was a hack to display mag_orientation est
            angular_velocity=Vector3(*mag_orientation),
            angular_velocity_covariance=
                [0.03**2, 0,       0,
                 0,       0.03**2, 0,
                 0,       0,       0.03**2,],

            linear_acceleration=Vector3(*linear_acc),
            linear_acceleration_covariance=
                [0.03**2, 0,       0,
                 0,       0.03**2, 0,
                 0,       0,       0.03**2,],
        )

        self.accel_data_pub.publish(IMU_msg)


if __name__ == '__main__':
    usage_msg = "Serial interface with the XMega128A1U for the IEEE2015 team"
    desc_msg = "Specify a types_path that points to types.h in the xmega folder to handle types parsing"
    parser = argparse.ArgumentParser(usage=usage_msg, description=desc_msg)
    parser.add_argument('--types_path', dest='types_path',
                      help='Designate the absolute location of the types.h file')
    parser.add_argument('--port', dest='port', 
                      help='Designate the port in /dev/ where we will look for the xmega')

    args = parser.parse_args(rospy.myargv()[1:])
    types_path = args.types_path
    port = args.port
    print 'Reading types at path:', types_path
    print 'Searching at port:', port
    driver = Xmega_Driver(types_path, port)
    rospy.spin()
