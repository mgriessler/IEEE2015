#!/usr/bin/python
from __future__ import division
'''This node is under construction! It will come together over the weekend
Notes to implementers:
- When you have code in an external package, use roslib.load_manifest(*ROS* package name)
-- An example - for chess vision, is that you must load the manifest for ieee2015_vision to access
the chess_vision *python* package in ieee2015_vision
So, a ROS package can contain multiple Python packages.
When testing your changes,
- Try doing a catkin_make -C ~/catkin_ws and check for errors
- Then do rosrun ieee2015_mission_control chess_mission_control
'''
print('hi ther');
#All you have to do is clone the ieee repository into the src directory in your catkin workspace
#it explains in the readme
import rospy
import cv2
# Packages
import roslib
roslib.load_manifest('ieee2015_vision')
import chess_vision  # Import the Chess Vision package
roslib.load_manifest('ieee2015_ai')
import chess_ai  # Import the chess ai package
# Temporary...
ARM_HOME = (100, 100)
PICKING_HEIGHT = 10
GRABBING_HEIGHT = 4
tf_bot_to_board = None  # Fill this in!
global w_or_b_turn  # could be whatever we choose initally


print('hey');
# /Temporary
# Precomments...
# Go to start position "home"
# Send the vision service
# Get back from the vision service, with a new occupancy grid
# Using chess module in here...
# Use the occupancy grid to get board state <- given previous occupancy grid and board state
# Send the current board state to the AI
# Get the decision
# Use the decision to command the arm
# --> Go to target piece
# --> Use vision to correct (internal to the servo controller)
# --> Grab piece, rise
# Return "Home"
# ? Use vision to check that we did what we think we did (lump in with the repeat check)
# Get a completion/sucess message
# Wait for human move
# Return to start
# end Precomments....

#use these as refererence guides
#take in two images for testing


class Mission_Control(object):
    print('hey again');
    def __init__(self):

        def execute(self):
            #send_arm_to_pos()

            #need this here for testing need to be fields
            old_occupancy_grid = [1, 1, 1, 1, 1, 1, 1, 1,
                                    1, 1, 1, 1, 1, 1, 1, 1,
                                    0, 0, 0, 0, 0, 0, 0, 0,
                                    0, 0, 0, 0, 0, 0, 0, 0,
                                    0, 0, 0, 0, 0, 0, 0, 0,
                                    0, 0, 0, 0, 0, 0, 0, 0,
                                    2, 2, 2, 2, 2, 2, 2, 2,
                                    2, 2, 2, 2, 2, 2, 2, 2]

            new_occupancy_grid = []
            #needs to be a field
            w_or_b_turn = 'w'

            #also needs to be a field
            #ideally we never want this in here but for testing, yeah
            board_state = ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r',
                            'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e',
                            'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e',
                            'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e',
                            'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e',
                            'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P',
                            'R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R']

            'move arm to home position'
            imgnew = cv2.imread('lib/chessanglesmall.jpg')
            imgnew = cv2.resize(imgnew, (480, 640))
            #this needs to be automated but for sake of testing we are just reading in images

            #below line needs to be added in once we can choose when to take in new images
            #old_occupancy_grid, coordinates_of_grid = chess_vision.get_Occupancy_and_Coordinates(imgold)
            new_occupany_grid, coordinates_of_grid = chess_vision.get_Occupancy_and_Coordinates(imgnew)
            #below method returns our new current updated board state
            board_state = chess_vision.findDifferencesArrays(old_occupancy_grid, new_occupancy_grid, board_state)
            print board_state  # testing

            chess_vision.printBoardAndPieces(board_state);
            #after the board state is updated, we no longer need the old_occupancy_grid
            #the occupancy grid needs to be replaced with the new one so the cycle can be repeated
            old_occupancy_grid = new_occupancy_grid

            #fe is forsyth edwards notation to be taken in by AI
            current_fe = chess_vision.giveForsythEdwardsNotation(board_state, w_or_b_turn)
            piece_to_move = chess_ai.get_chess_move(current_fe)

            'move arm to grab piece'
            'pick up piece'

            print piece_to_move

            answer = rosservice.call('/do_arm_action', piece_to_move)

            #at the end of a move, the player needs to change
            #we also need a way to inform mission control when opponents tern is over
            #so we will need a ros suscribe for the robot to know
            changed_player = chess_vision.changePlayer(w_or_b_turn)
            w_or_b_turn = changed_player
            ########################################################################################
            #the following are method calls the mission control will have to make with regards to
            #ai and vision using the imported packages
            ########################################################################################
            #this method will need to take in an image given to it by mission control
            #don't know how to take in image from mission control after each players move
            #this new occupancy grid is what will be used to make comparisons between the grid we
            #just took in, and the grid mission control has stored as the last grid/turn
            # new_occupancy_grid, array_of_coordinates = chess_vision.get_Occupancy_and_Coordinates(img)
            print "Running ros node!"
            #coordinates can be used to find center of each chess piece if the square contains it
            #will be modified with how the architecture is set up



MC = Mission_Control()
print('we made an object');
MC.execute()
